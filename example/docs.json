{
	"id": 0,
	"name": "TypeDoc Example",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"children": [
		{
			"id": 556,
			"name": "lodashSortBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExternal": true
			},
			"signatures": [
				{
					"id": 557,
					"name": "lodashSortBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Creates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection through each iteratee. This method\nperforms a stable sort, that is, it preserves the original sort order of\nequal elements. The iteratees are invoked with one argument: (value).",
						"returns": "Returns the new sorted array.",
						"tags": [
							{
								"tag": "example",
								"text": "\n\nvar users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 42 },\n  { 'user': 'barney', 'age': 34 }\n];\n\n_.sortBy(users, function(o) { return o.user; });\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n\n_.sortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\n\n_.sortBy(users, 'user', function(o) {\n  return Math.floor(o.age / 10);\n});\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 558,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExternal": true
							}
						}
					],
					"parameters": [
						{
							"id": 559,
							"name": "collection",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "The collection to iterate over."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 558,
												"qualifiedName": "T",
												"package": "@types/lodash",
												"name": "T"
											}
										],
										"qualifiedName": "List",
										"package": "@types/lodash",
										"name": "List"
									}
								]
							}
						},
						{
							"id": 560,
							"name": "iteratees",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true,
								"isRest": true
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"id": 558,
													"qualifiedName": "T",
													"package": "@types/lodash",
													"name": "T"
												}
											],
											"qualifiedName": "ListIteratee",
											"package": "@types/lodash",
											"name": "ListIteratee"
										}
									],
									"qualifiedName": "Many",
									"package": "@types/lodash",
									"name": "Many"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 558,
							"qualifiedName": "T",
							"package": "@types/lodash",
							"name": "T"
						}
					}
				},
				{
					"id": 561,
					"name": "lodashSortBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"tags": [
							{
								"tag": "see",
								"text": "_.sortBy\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 562,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"parameters": [
						{
							"id": 563,
							"name": "collection",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 562,
										"qualifiedName": "T",
										"package": "@types/lodash",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 564,
							"name": "iteratees",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true,
								"isRest": true
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"id": 562,
													"qualifiedName": "T",
													"package": "@types/lodash",
													"name": "T"
												}
											],
											"qualifiedName": "ObjectIteratee",
											"package": "@types/lodash",
											"name": "ObjectIteratee"
										}
									],
									"qualifiedName": "Many",
									"package": "@types/lodash",
									"name": "Many"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 562,
									"qualifiedName": "T",
									"package": "@types/lodash",
									"name": "T"
								}
							},
							"objectType": {
								"type": "reference",
								"id": 562,
								"qualifiedName": "T",
								"package": "@types/lodash",
								"name": "T"
							}
						}
					}
				}
			]
		},
		{
			"id": 404,
			"name": "CancellablePromise",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "This example shows off how TypeDoc handles",
				"text": "- Complex method signatures\n- Static methods\n- A method with 10 overload signatures. Wow!\n    - Only the implementation signature has a doc comment. TypeDoc\n      automatically copies the comment from the implementation signature to\n      each of the visible signatures if they don't have one.\n\nA promise with a `cancel` method.  If canceled, the `CancellablePromise` will\nreject with a `Cancellation` object. Originally from\n[real-cancellable-promise](https://github.com/srmagura/real-cancellable-promise).\n"
			},
			"children": [
				{
					"id": 512,
					"name": "promise",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "As a consumer of the library, you shouldn't ever need to access\n`CancellablePromise.promise` directly.",
						"text": "If you are subclassing `CancellablePromise` for some reason, you\ncan access this property.\n"
					},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 54,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 506,
								"name": "T"
							}
						],
						"qualifiedName": "Promise",
						"package": "typescript",
						"name": "Promise"
					}
				},
				{
					"id": 513,
					"name": "cancel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 63,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 514,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 515,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancel the `CancellablePromise`."
									},
									"parameters": [
										{
											"id": 516,
											"name": "reason",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 504,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 70,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 505,
							"name": "new CancellablePromise",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {},
							"typeParameter": [
								{
									"id": 506,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 507,
									"name": "promise",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "a normal promise or thenable"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 506,
												"name": "T"
											}
										],
										"qualifiedName": "PromiseLike",
										"package": "typescript",
										"name": "PromiseLike"
									}
								},
								{
									"id": 508,
									"name": "cancel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "a function that cancels `promise`. **Calling `cancel` after\n`promise` has resolved must be a no-op.**\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 509,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 510,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 511,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "reference",
										"id": 506,
										"name": "T"
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 517,
					"name": "then",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 95,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 518,
							"name": "then",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.then`.",
								"text": "`onFulfilled` on `onRejected` can return a value, a normal promise, or a\n`CancellablePromise`. So you can make a chain a `CancellablePromise`s\nlike this:\n\n```\nconst overallPromise = cancellableAsyncFunction1()\n    .then(cancellableAsyncFunction2)\n    .then(cancellableAsyncFunction3)\n    .then(cancellableAsyncFunction4)\n```\n\nThen if you call `overallPromise.cancel`, `cancel` is called on all\n`CancellablePromise`s in the chain! In practice, this means that\nwhichever async operation is in progress will be canceled.\n",
								"returns": "a new CancellablePromise\n"
							},
							"typeParameter": [
								{
									"id": 519,
									"name": "TResult1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "reference",
										"id": 506,
										"name": "T"
									}
								},
								{
									"id": 520,
									"name": "TResult2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							],
							"parameters": [
								{
									"id": 521,
									"name": "onFulfilled",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 522,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 523,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 524,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 506,
																		"name": "T"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 519,
																		"name": "TResult1"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 519,
																				"name": "TResult1"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 525,
									"name": "onRejected",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 526,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 527,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 528,
																	"name": "reason",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 520,
																		"name": "TResult2"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 520,
																				"name": "TResult2"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 519,
												"name": "TResult1"
											},
											{
												"type": "reference",
												"id": 520,
												"name": "TResult2"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 529,
					"name": "catch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 146,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 530,
							"name": "catch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.catch`."
							},
							"typeParameter": [
								{
									"id": 531,
									"name": "TResult",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							],
							"parameters": [
								{
									"id": 532,
									"name": "onRejected",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 533,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 534,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 535,
																	"name": "reason",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 531,
																		"name": "TResult"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 531,
																				"name": "TResult"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 506,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 531,
												"name": "TResult"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 536,
					"name": "finally",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 163,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 537,
							"name": "finally",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attaches a callback that is invoked when the Promise is settled\n(fulfilled or rejected). The resolved value cannot be modified from the\ncallback.",
								"returns": "A Promise for the completion of the callback.\n"
							},
							"parameters": [
								{
									"id": 538,
									"name": "onFinally",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The callback to execute when the Promise is settled\n(fulfilled or rejected)."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 539,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 540,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "reference",
										"id": 506,
										"name": "T"
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 405,
					"name": "resolve",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 179,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 406,
							"name": "resolve",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.resolve`.",
								"text": "The returned promise should resolve even if it is canceled. The idea is\nthat the promise is resolved instantaneously, so by the time the promise\nis canceled, it has already resolved.\n"
							},
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 407,
							"name": "resolve",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 408,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 409,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 408,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "reference",
										"id": 408,
										"name": "T"
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 410,
					"name": "reject",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 195,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 411,
							"name": "reject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.reject`.",
								"text": "Like `CancellablePromise.resolve`, canceling the returned\n`CancellablePromise` is a no-op.\n"
							},
							"typeParameter": [
								{
									"id": 412,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 413,
									"name": "reason",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "this should probably be an `Error` object\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "reference",
										"id": 412,
										"name": "T"
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 414,
					"name": "all",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 199,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 415,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 416,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 417,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 418,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 419,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 420,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 421,
									"name": "T6",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 422,
									"name": "T7",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 423,
									"name": "T8",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 424,
									"name": "T9",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 425,
									"name": "T10",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 426,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 416,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 416,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 417,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 417,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 418,
															"name": "T3"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 418,
																	"name": "T3"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 419,
															"name": "T4"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 419,
																	"name": "T4"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 420,
															"name": "T5"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 420,
																	"name": "T5"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 421,
															"name": "T6"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 421,
																	"name": "T6"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 422,
															"name": "T7"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 422,
																	"name": "T7"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 423,
															"name": "T8"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 423,
																	"name": "T8"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 424,
															"name": "T9"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 424,
																	"name": "T9"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 425,
															"name": "T10"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 425,
																	"name": "T10"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 416,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 417,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 418,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 419,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 420,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 421,
												"name": "T6"
											},
											{
												"type": "reference",
												"id": 422,
												"name": "T7"
											},
											{
												"type": "reference",
												"id": 423,
												"name": "T8"
											},
											{
												"type": "reference",
												"id": 424,
												"name": "T9"
											},
											{
												"type": "reference",
												"id": 425,
												"name": "T10"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 427,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 428,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 429,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 430,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 431,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 432,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 433,
									"name": "T6",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 434,
									"name": "T7",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 435,
									"name": "T8",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 436,
									"name": "T9",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 437,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 428,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 428,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 429,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 429,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 430,
															"name": "T3"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 430,
																	"name": "T3"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 431,
															"name": "T4"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 431,
																	"name": "T4"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 432,
															"name": "T5"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 432,
																	"name": "T5"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 433,
															"name": "T6"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 433,
																	"name": "T6"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 434,
															"name": "T7"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 434,
																	"name": "T7"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 435,
															"name": "T8"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 435,
																	"name": "T8"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 436,
															"name": "T9"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 436,
																	"name": "T9"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 428,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 429,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 430,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 431,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 432,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 433,
												"name": "T6"
											},
											{
												"type": "reference",
												"id": 434,
												"name": "T7"
											},
											{
												"type": "reference",
												"id": 435,
												"name": "T8"
											},
											{
												"type": "reference",
												"id": 436,
												"name": "T9"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 438,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 439,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 440,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 441,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 442,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 443,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 444,
									"name": "T6",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 445,
									"name": "T7",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 446,
									"name": "T8",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 447,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 439,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 439,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 440,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 440,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 441,
															"name": "T3"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 441,
																	"name": "T3"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 442,
															"name": "T4"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 442,
																	"name": "T4"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 443,
															"name": "T5"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 443,
																	"name": "T5"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 444,
															"name": "T6"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 444,
																	"name": "T6"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 445,
															"name": "T7"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 445,
																	"name": "T7"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 446,
															"name": "T8"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 446,
																	"name": "T8"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 439,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 440,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 441,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 442,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 443,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 444,
												"name": "T6"
											},
											{
												"type": "reference",
												"id": 445,
												"name": "T7"
											},
											{
												"type": "reference",
												"id": 446,
												"name": "T8"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 448,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 449,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 450,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 451,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 452,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 453,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 454,
									"name": "T6",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 455,
									"name": "T7",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 456,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 449,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 449,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 450,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 450,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 451,
															"name": "T3"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 451,
																	"name": "T3"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 452,
															"name": "T4"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 452,
																	"name": "T4"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 453,
															"name": "T5"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 453,
																	"name": "T5"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 454,
															"name": "T6"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 454,
																	"name": "T6"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 455,
															"name": "T7"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 455,
																	"name": "T7"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 449,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 450,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 451,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 452,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 453,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 454,
												"name": "T6"
											},
											{
												"type": "reference",
												"id": 455,
												"name": "T7"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 457,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 458,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 459,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 460,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 461,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 462,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 463,
									"name": "T6",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 464,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 458,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 458,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 459,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 459,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 460,
															"name": "T3"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 460,
																	"name": "T3"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 461,
															"name": "T4"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 461,
																	"name": "T4"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 462,
															"name": "T5"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 462,
																	"name": "T5"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 463,
															"name": "T6"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 463,
																	"name": "T6"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 458,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 459,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 460,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 461,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 462,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 463,
												"name": "T6"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 465,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 466,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 467,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 468,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 469,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 470,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 471,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 466,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 466,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 467,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 467,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 468,
															"name": "T3"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 468,
																	"name": "T3"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 469,
															"name": "T4"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 469,
																	"name": "T4"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 470,
															"name": "T5"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 470,
																	"name": "T5"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 466,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 467,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 468,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 469,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 470,
												"name": "T5"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 472,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 473,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 474,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 475,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 476,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 477,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 473,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 473,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 474,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 474,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 475,
															"name": "T3"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 475,
																	"name": "T3"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 476,
															"name": "T4"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 476,
																	"name": "T4"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 473,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 474,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 475,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 476,
												"name": "T4"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 478,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 479,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 480,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 481,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 482,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 479,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 479,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 480,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 480,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 481,
															"name": "T3"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 481,
																	"name": "T3"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 479,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 480,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 481,
												"name": "T3"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 483,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 484,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 485,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 486,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 484,
															"name": "T1"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 484,
																	"name": "T1"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												},
												{
													"type": "union",
													"types": [
														{
															"type": "reference",
															"id": 485,
															"name": "T2"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 485,
																	"name": "T2"
																}
															],
															"qualifiedName": "PromiseLike",
															"package": "typescript",
															"name": "PromiseLike"
														}
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "reference",
												"id": 484,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 485,
												"name": "T2"
											}
										]
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 487,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Analogous to `Promise.all`.",
								"returns": "a [[`CancellablePromise`]], which, if canceled, will cancel each\nof the promises passed in to `CancellablePromise.all`.\n"
							},
							"typeParameter": [
								{
									"id": 488,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 489,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "an array that may contain `CancellablePromise`s, promises,\nthenables, and resolved values"
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 488,
														"name": "T"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"id": 488,
																"name": "T"
															}
														],
														"qualifiedName": "PromiseLike",
														"package": "typescript",
														"name": "PromiseLike"
													}
												]
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 488,
											"name": "T"
										}
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 490,
					"name": "allSettled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 321,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 491,
							"name": "allSettled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a `CancellablePromise` that is resolved with an array of results\nwhen all of the provided `Promises` resolve or reject.",
								"returns": "A new `CancellablePromise`.\n"
							},
							"typeParameter": [
								{
									"id": 492,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeOperator",
												"operator": "readonly",
												"target": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											},
											{
												"type": "typeOperator",
												"operator": "readonly",
												"target": {
													"type": "tuple",
													"elements": [
														{
															"type": "intrinsic",
															"name": "unknown"
														}
													]
												}
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 493,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An array of `Promises`."
									},
									"type": {
										"type": "reference",
										"id": 492,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "mapped",
										"parameter": "P",
										"parameterType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "number"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										},
										"templateType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "conditional",
													"checkType": {
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"name": "P"
														},
														"objectType": {
															"type": "reference",
															"id": 492,
															"name": "T"
														}
													},
													"extendsType": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "U"
															}
														],
														"qualifiedName": "PromiseLike",
														"package": "typescript",
														"name": "PromiseLike"
													},
													"trueType": {
														"type": "reference",
														"name": "U"
													},
													"falseType": {
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"name": "P"
														},
														"objectType": {
															"type": "reference",
															"id": 492,
															"name": "T"
														}
													}
												}
											],
											"qualifiedName": "PromiseSettledResult",
											"package": "typescript",
											"name": "PromiseSettledResult"
										},
										"readonlyModifier": "-"
									}
								],
								"name": "CancellablePromise"
							}
						},
						{
							"id": 494,
							"name": "allSettled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a `CancellablePromise` that is resolved with an array of results\nwhen all of the provided `Promise`s resolve or reject.",
								"returns": "A new `CancellablePromise`. Canceling it cancels all of the input\npromises.\n"
							},
							"typeParameter": [
								{
									"id": 495,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 496,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An array of `Promise`s."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 495,
												"name": "T"
											}
										],
										"qualifiedName": "Iterable",
										"package": "typescript",
										"name": "Iterable"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "conditional",
													"checkType": {
														"type": "reference",
														"id": 495,
														"name": "T"
													},
													"extendsType": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "U"
															}
														],
														"qualifiedName": "PromiseLike",
														"package": "typescript",
														"name": "PromiseLike"
													},
													"trueType": {
														"type": "reference",
														"name": "U"
													},
													"falseType": {
														"type": "reference",
														"id": 495,
														"name": "T"
													}
												}
											],
											"qualifiedName": "PromiseSettledResult",
											"package": "typescript",
											"name": "PromiseSettledResult"
										}
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 497,
					"name": "race",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 362,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 498,
							"name": "race",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a `CancellablePromise` that is resolved or rejected when any of\nthe provided `Promises` are resolved or rejected.",
								"returns": "A new `CancellablePromise`. Canceling it cancels all of the input\npromises.\n"
							},
							"typeParameter": [
								{
									"id": 499,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 500,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An array of `Promises`."
									},
									"type": {
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"id": 499,
												"name": "T"
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 499,
												"name": "T"
											}
										],
										"qualifiedName": "Awaited",
										"package": "typescript",
										"name": "Awaited"
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				},
				{
					"id": 501,
					"name": "delay",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/CancellablePromise.ts",
							"line": 377,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 502,
							"name": "delay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "a `CancellablePromise` that resolves after `ms` milliseconds.\n"
							},
							"parameters": [
								{
									"id": 503,
									"name": "ms",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 404,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "CancellablePromise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						512,
						513
					]
				},
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						504
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						517,
						529,
						536,
						405,
						410,
						414,
						490,
						497,
						501
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/classes/CancellablePromise.ts",
					"line": 46,
					"character": 13
				}
			],
			"typeParameter": [
				{
					"id": 541,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"comment": {
						"shortText": "what the `CancellablePromise` resolves to\n"
					}
				}
			]
		},
		{
			"id": 64,
			"name": "Customer",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isAbstract": true
			},
			"comment": {
				"shortText": "An abstract base class for the customer entity in our application.",
				"text": "Notice how TypeDoc shows the inheritance hierarchy for our class.\n"
			},
			"children": [
				{
					"id": 70,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isReadonly": true
					},
					"comment": {
						"shortText": "A public readonly property."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 8,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 71,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "A public property that can be reassigned."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 11,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 72,
					"name": "contactName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional protected property."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 14,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 73,
					"name": "_nextOrderNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"shortText": "A private property that is accessed via a getter and setter."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 17,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 74,
					"name": "nextOrderNumber",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 23,
							"character": 8
						}
					],
					"getSignature": [
						{
							"id": 75,
							"name": "nextOrderNumber",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"comment": {
								"shortText": "A getter that prepends a number sign to the private `_nextOrderNumber`\nproperty."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"setSignature": [
						{
							"id": 76,
							"name": "nextOrderNumber",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"comment": {
								"shortText": "A setter that takes in either a string or a number and sets the private\n`_nextOrderNumber` property."
							},
							"parameters": [
								{
									"id": 77,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 65,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 46,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 66,
							"name": "new Customer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "The constructor of the `Customer` class."
							},
							"parameters": [
								{
									"id": 67,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the customer's database ID"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 68,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the customer's name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 69,
									"name": "nextOrderNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the next number to use when this customer places an order\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 64,
								"name": "Customer"
							}
						}
					]
				},
				{
					"id": 78,
					"name": "onOrderPlaced",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 54,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 79,
							"name": "onOrderPlaced",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A public method. To be called when an order is placed for this customer."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 80,
					"name": "onOrderPlacedArrowFunction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 63,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 81,
							"name": "onOrderPlacedArrowFunction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A public method that's defined using an arrow function.",
								"text": "TypeDoc knows to document this as a method rather than a property.\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 82,
					"name": "isValid",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 68,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 83,
							"name": "isValid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A protected method."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 84,
					"name": "doInternalStuff",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 73,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 85,
							"name": "doInternalStuff",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A private method."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						70,
						71,
						72,
						73
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						74
					]
				},
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						65
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						78,
						80,
						82,
						84
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/classes/Customer.ts",
					"line": 6,
					"character": 22
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 86,
					"name": "DeliveryCustomer"
				}
			]
		},
		{
			"id": 86,
			"name": "DeliveryCustomer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "A class that extends [[`Customer`]]."
			},
			"children": [
				{
					"id": 97,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isReadonly": true
					},
					"comment": {
						"shortText": "A public readonly property."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 8,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 70,
						"name": "Customer.id"
					}
				},
				{
					"id": 98,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "A public property that can be reassigned."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 11,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 71,
						"name": "Customer.name"
					}
				},
				{
					"id": 99,
					"name": "contactName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "An optional protected property."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 14,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 72,
						"name": "Customer.contactName"
					}
				},
				{
					"id": 100,
					"name": "nextOrderNumber",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 23,
							"character": 8
						}
					],
					"getSignature": [
						{
							"id": 101,
							"name": "nextOrderNumber",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {},
							"comment": {
								"shortText": "A getter that prepends a number sign to the private `_nextOrderNumber`\nproperty."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Customer.nextOrderNumber"
							}
						}
					],
					"setSignature": [
						{
							"id": 102,
							"name": "nextOrderNumber",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {},
							"comment": {
								"shortText": "A setter that takes in either a string or a number and sets the private\n`_nextOrderNumber` property."
							},
							"parameters": [
								{
									"id": 103,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Customer.nextOrderNumber"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 74,
						"name": "Customer.nextOrderNumber"
					}
				},
				{
					"id": 104,
					"name": "onOrderPlaced",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 54,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 105,
							"name": "onOrderPlaced",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A public method. To be called when an order is placed for this customer."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 79,
								"name": "Customer.onOrderPlaced"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 78,
						"name": "Customer.onOrderPlaced"
					}
				},
				{
					"id": 106,
					"name": "onOrderPlacedArrowFunction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 63,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 107,
							"name": "onOrderPlacedArrowFunction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A public method that's defined using an arrow function.",
								"text": "TypeDoc knows to document this as a method rather than a property.\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 81,
								"name": "Customer.onOrderPlacedArrowFunction"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 80,
						"name": "Customer.onOrderPlacedArrowFunction"
					}
				},
				{
					"id": 93,
					"name": "preferredCourierId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A property defined on the subclass."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 83,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 94,
					"name": "subscriptionType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isReadonly": true
					},
					"comment": {
						"shortText": "Another property defined on the subclass."
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 86,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "basic"
							},
							{
								"type": "literal",
								"value": "enterprise"
							}
						]
					}
				},
				{
					"id": 87,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 96,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 88,
							"name": "new DeliveryCustomer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "The constructor of the `DeliveryCustomer` class."
							},
							"parameters": [
								{
									"id": 89,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the customer's database ID"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 90,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the customer's name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 91,
									"name": "nextOrderNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the next number to use when this customer places an order"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 92,
									"name": "subscriptionType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "whether this customer has a basic or enterprise subscription\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "basic"
											},
											{
												"type": "literal",
												"value": "enterprise"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 86,
								"name": "DeliveryCustomer"
							},
							"overwrites": {
								"type": "reference",
								"id": 66,
								"name": "Customer.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 65,
						"name": "Customer.constructor"
					}
				},
				{
					"id": 95,
					"name": "isValid",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "example/src/classes/Customer.ts",
							"line": 112,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 96,
							"name": "isValid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An example of overriding a protected method.",
								"text": "A `DeliveryCustomer` can only have a preferred courier if its\nsubscription type is enterprise.\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"id": 83,
								"name": "Customer.isValid"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 82,
						"name": "Customer.isValid"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						97,
						98,
						99,
						93,
						94
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						100
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						104,
						106,
						95
					]
				},
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						87
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/classes/Customer.ts",
					"line": 81,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 64,
					"name": "Customer"
				}
			]
		},
		{
			"id": 108,
			"name": "StringArray",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "An array of strings that's defined as",
				"text": "```\nexport class StringArray extends Array<string> {\n    // ...\n}\n```\n\nNotice how TypeDoc has substituted `string` for the generic type argument in all\nthe methods inherited from `Array`. For example, the `values` method returns\n`IterableIterator<string>`.\n"
			},
			"children": [
				{
					"id": 149,
					"name": "customMethod",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/classes/StringArray.ts",
							"line": 16,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 150,
							"name": "customMethod",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A method that extends the functionality of a basic JavaScript array."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 323,
					"name": "find",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 324,
							"name": "find",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
							},
							"typeParameter": [
								{
									"id": 325,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 326,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 327,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 328,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 329,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														},
														{
															"id": 330,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 331,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 332,
															"name": "obj",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "predicate",
														"name": "value",
														"asserts": false,
														"targetType": {
															"type": "reference",
															"id": 325,
															"qualifiedName": "S",
															"package": "typescript",
															"name": "S"
														}
													}
												}
											]
										}
									}
								},
								{
									"id": 333,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 325,
										"qualifiedName": "S",
										"package": "typescript",
										"name": "S"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.find"
							}
						},
						{
							"id": 334,
							"name": "find",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 335,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 336,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 337,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 338,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 339,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 340,
															"name": "obj",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 341,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.find"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.find"
					}
				},
				{
					"id": 342,
					"name": "findIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 343,
							"name": "findIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
							},
							"parameters": [
								{
									"id": 344,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 345,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 346,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 347,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 348,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 349,
															"name": "obj",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 350,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.findIndex"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.findIndex"
					}
				},
				{
					"id": 351,
					"name": "fill",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 352,
							"name": "fill",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array"
							},
							"parameters": [
								{
									"id": 353,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "value to fill array section with"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 354,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 355,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "index to stop filling the array at. If end is negative, it is treated as\nlength+end.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 108,
								"name": "StringArray"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.fill"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.fill"
					}
				},
				{
					"id": 356,
					"name": "copyWithin",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 357,
							"name": "copyWithin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
							},
							"parameters": [
								{
									"id": 358,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "If target is negative, it is treated as length+target where length is the\nlength of the array."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 359,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 360,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "If not specified, length of the this object is used as its default value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 108,
								"name": "StringArray"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.copyWithin"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.copyWithin"
					}
				},
				{
					"id": 112,
					"name": "from",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"signatures": [
						{
							"id": 113,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Creates an array from an array-like object."
							},
							"typeParameter": [
								{
									"id": 114,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 115,
									"name": "arrayLike",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "An array-like object to convert to an array.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 114,
												"qualifiedName": "T",
												"package": "typescript",
												"name": "T"
											}
										],
										"qualifiedName": "ArrayLike",
										"package": "typescript",
										"name": "ArrayLike"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 114,
									"qualifiedName": "T",
									"package": "typescript",
									"name": "T"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.from"
							}
						},
						{
							"id": 116,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Creates an array from an iterable object."
							},
							"typeParameter": [
								{
									"id": 117,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 118,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 119,
									"name": "arrayLike",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "An array-like object to convert to an array."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 117,
												"qualifiedName": "T",
												"package": "typescript",
												"name": "T"
											}
										],
										"qualifiedName": "ArrayLike",
										"package": "typescript",
										"name": "ArrayLike"
									}
								},
								{
									"id": 120,
									"name": "mapfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A mapping function to call on every element of the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 121,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 122,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 123,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 117,
																"qualifiedName": "T",
																"package": "typescript",
																"name": "T"
															}
														},
														{
															"id": 124,
															"name": "k",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 118,
														"qualifiedName": "U",
														"package": "typescript",
														"name": "U"
													}
												}
											]
										}
									}
								},
								{
									"id": 125,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of 'this' used to invoke the mapfn.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 118,
									"qualifiedName": "U",
									"package": "typescript",
									"name": "U"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.from"
							}
						},
						{
							"id": 126,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Creates an array from an iterable object."
							},
							"typeParameter": [
								{
									"id": 127,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 128,
									"name": "iterable",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "An iterable object to convert to an array.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 127,
														"qualifiedName": "T",
														"package": "typescript",
														"name": "T"
													}
												],
												"qualifiedName": "Iterable",
												"package": "typescript",
												"name": "Iterable"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 127,
														"qualifiedName": "T",
														"package": "typescript",
														"name": "T"
													}
												],
												"qualifiedName": "ArrayLike",
												"package": "typescript",
												"name": "ArrayLike"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 127,
									"qualifiedName": "T",
									"package": "typescript",
									"name": "T"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.from"
							}
						},
						{
							"id": 129,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Creates an array from an iterable object."
							},
							"typeParameter": [
								{
									"id": 130,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 131,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 132,
									"name": "iterable",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "An iterable object to convert to an array."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 130,
														"qualifiedName": "T",
														"package": "typescript",
														"name": "T"
													}
												],
												"qualifiedName": "Iterable",
												"package": "typescript",
												"name": "Iterable"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 130,
														"qualifiedName": "T",
														"package": "typescript",
														"name": "T"
													}
												],
												"qualifiedName": "ArrayLike",
												"package": "typescript",
												"name": "ArrayLike"
											}
										]
									}
								},
								{
									"id": 133,
									"name": "mapfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A mapping function to call on every element of the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 134,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 135,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 136,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 130,
																"qualifiedName": "T",
																"package": "typescript",
																"name": "T"
															}
														},
														{
															"id": 137,
															"name": "k",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 131,
														"qualifiedName": "U",
														"package": "typescript",
														"name": "U"
													}
												}
											]
										}
									}
								},
								{
									"id": 138,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "Value of 'this' used to invoke the mapfn.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 131,
									"qualifiedName": "U",
									"package": "typescript",
									"name": "U"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.from"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.from"
					}
				},
				{
					"id": 139,
					"name": "of",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"signatures": [
						{
							"id": 140,
							"name": "of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a new array from a set of elements."
							},
							"typeParameter": [
								{
									"id": 141,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 142,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"shortText": "A set of elements to include in the new array object.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 141,
											"qualifiedName": "T",
											"package": "typescript",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 141,
									"qualifiedName": "T",
									"package": "typescript",
									"name": "T"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.of"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.of"
					}
				},
				{
					"id": 392,
					"name": "[iterator]",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 393,
							"name": "[iterator]",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Iterator"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"qualifiedName": "IterableIterator",
								"package": "typescript",
								"name": "IterableIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.__@iterator@13"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.__@iterator@13"
					}
				},
				{
					"id": 361,
					"name": "entries",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 362,
							"name": "entries",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns an iterable of key, value pairs for every entry in the array"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								],
								"qualifiedName": "IterableIterator",
								"package": "typescript",
								"name": "IterableIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.entries"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.entries"
					}
				},
				{
					"id": 363,
					"name": "keys",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 364,
							"name": "keys",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns an iterable of keys in the array"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"qualifiedName": "IterableIterator",
								"package": "typescript",
								"name": "IterableIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.keys"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.keys"
					}
				},
				{
					"id": 365,
					"name": "values",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 366,
							"name": "values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns an iterable of values in the array"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"qualifiedName": "IterableIterator",
								"package": "typescript",
								"name": "IterableIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.values"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.values"
					}
				},
				{
					"id": 394,
					"name": "[unscopables]",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 395,
							"name": "[unscopables]",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 396,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExternal": true
									},
									"children": [
										{
											"id": 397,
											"name": "copyWithin",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
													"line": 100,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 398,
											"name": "entries",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
													"line": 101,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 399,
											"name": "fill",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
													"line": 102,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 400,
											"name": "find",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
													"line": 103,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 401,
											"name": "findIndex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
													"line": 104,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 402,
											"name": "keys",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
													"line": 105,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 403,
											"name": "values",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
													"line": 106,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												397,
												398,
												399,
												400,
												401,
												402,
												403
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.__@unscopables@40"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.__@unscopables@40"
					}
				},
				{
					"id": 143,
					"name": "[species]",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
							"line": 314,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "ArrayConstructor",
						"package": "typescript",
						"name": "ArrayConstructor"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.__@species@234"
					}
				},
				{
					"id": 367,
					"name": "includes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 368,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Determines whether an array includes a certain element, returning true or false as appropriate."
							},
							"parameters": [
								{
									"id": 369,
									"name": "searchElement",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The element to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 370,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The position in this array at which to begin searching for searchElement.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.includes"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.includes"
					}
				},
				{
					"id": 371,
					"name": "flatMap",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 372,
							"name": "flatMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1."
							},
							"typeParameter": [
								{
									"id": 373,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 374,
									"name": "This",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"default": {
										"type": "intrinsic",
										"name": "undefined"
									}
								}
							],
							"parameters": [
								{
									"id": 375,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 376,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 377,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 378,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 374,
																"qualifiedName": "This",
																"package": "typescript",
																"name": "This"
															}
														},
														{
															"id": 379,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 380,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 381,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 373,
																"qualifiedName": "U",
																"package": "typescript",
																"name": "U"
															},
															{
																"type": "typeOperator",
																"operator": "readonly",
																"target": {
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"id": 373,
																		"qualifiedName": "U",
																		"package": "typescript",
																		"name": "U"
																	}
																}
															}
														]
													}
												}
											]
										}
									}
								},
								{
									"id": 382,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value.\n"
									},
									"type": {
										"type": "reference",
										"id": 374,
										"qualifiedName": "This",
										"package": "typescript",
										"name": "This"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 373,
									"qualifiedName": "U",
									"package": "typescript",
									"name": "U"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.flatMap"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.flatMap"
					}
				},
				{
					"id": 383,
					"name": "flat",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 384,
							"name": "flat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth."
							},
							"typeParameter": [
								{
									"id": 385,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								},
								{
									"id": 386,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"default": {
										"type": "literal",
										"value": 1
									}
								}
							],
							"parameters": [
								{
									"id": 387,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 385,
										"qualifiedName": "A",
										"package": "typescript",
										"name": "A"
									}
								},
								{
									"id": 388,
									"name": "depth",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The maximum recursion depth\n"
									},
									"type": {
										"type": "reference",
										"id": 386,
										"qualifiedName": "D",
										"package": "typescript",
										"name": "D"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 385,
											"qualifiedName": "A",
											"package": "typescript",
											"name": "A"
										},
										{
											"type": "reference",
											"id": 386,
											"qualifiedName": "D",
											"package": "typescript",
											"name": "D"
										}
									],
									"qualifiedName": "FlatArray",
									"package": "typescript",
									"name": "FlatArray"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.flat"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.flat"
					}
				},
				{
					"id": 389,
					"name": "at",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 390,
							"name": "at",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the item located at the specified index."
							},
							"parameters": [
								{
									"id": 391,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The zero-based index of the desired code unit. A negative index will count back from the last item.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.at"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.at"
					}
				},
				{
					"id": 151,
					"name": "length",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "Gets or sets the length of the array. This is a number one higher than the highest index in the array."
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1273,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.length"
					}
				},
				{
					"id": 152,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 153,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a string representation of an array."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.toString"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.toString"
					}
				},
				{
					"id": 154,
					"name": "toLocaleString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 155,
							"name": "toLocaleString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.toLocaleString"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.toLocaleString"
					}
				},
				{
					"id": 156,
					"name": "pop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 157,
							"name": "pop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.pop"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.pop"
					}
				},
				{
					"id": 158,
					"name": "push",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 159,
							"name": "push",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Appends new elements to the end of an array, and returns the new length of the array."
							},
							"parameters": [
								{
									"id": 160,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"shortText": "New elements to add to the array.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.push"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.push"
					}
				},
				{
					"id": 161,
					"name": "concat",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 162,
							"name": "concat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays."
							},
							"parameters": [
								{
									"id": 163,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"shortText": "Additional arrays and/or items to add to the end of the array.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												}
											],
											"qualifiedName": "ConcatArray",
											"package": "typescript",
											"name": "ConcatArray"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.concat"
							}
						},
						{
							"id": 164,
							"name": "concat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays."
							},
							"parameters": [
								{
									"id": 165,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"shortText": "Additional arrays and/or items to add to the end of the array.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "string"
														}
													],
													"qualifiedName": "ConcatArray",
													"package": "typescript",
													"name": "ConcatArray"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.concat"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.concat"
					}
				},
				{
					"id": 166,
					"name": "join",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 167,
							"name": "join",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Adds all the elements of an array into a string, separated by the specified separator string."
							},
							"parameters": [
								{
									"id": 168,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.join"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.join"
					}
				},
				{
					"id": 169,
					"name": "reverse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 170,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reverse"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.reverse"
					}
				},
				{
					"id": 171,
					"name": "shift",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 172,
							"name": "shift",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.shift"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.shift"
					}
				},
				{
					"id": 173,
					"name": "slice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 174,
							"name": "slice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array."
							},
							"parameters": [
								{
									"id": 175,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 176,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.slice"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.slice"
					}
				},
				{
					"id": 177,
					"name": "sort",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 178,
							"name": "sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array."
							},
							"parameters": [
								{
									"id": 179,
									"name": "compareFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 180,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 181,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 182,
															"name": "a",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 183,
															"name": "b",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 108,
								"name": "StringArray"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.sort"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.sort"
					}
				},
				{
					"id": 184,
					"name": "splice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 185,
							"name": "splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
								"returns": "An array containing the elements that were deleted.\n"
							},
							"parameters": [
								{
									"id": 186,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The zero-based location in the array from which to start removing elements."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 187,
									"name": "deleteCount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The number of elements to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.splice"
							}
						},
						{
							"id": 188,
							"name": "splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
								"returns": "An array containing the elements that were deleted.\n"
							},
							"parameters": [
								{
									"id": 189,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The zero-based location in the array from which to start removing elements."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 190,
									"name": "deleteCount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The number of elements to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 191,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"shortText": "Elements to insert into the array in place of the deleted elements."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.splice"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.splice"
					}
				},
				{
					"id": 192,
					"name": "unshift",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 193,
							"name": "unshift",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Inserts new elements at the start of an array, and returns the new length of the array."
							},
							"parameters": [
								{
									"id": 194,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"comment": {
										"shortText": "Elements to insert at the start of the array.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.unshift"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.unshift"
					}
				},
				{
					"id": 195,
					"name": "indexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 196,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present."
							},
							"parameters": [
								{
									"id": 197,
									"name": "searchElement",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The value to locate in the array."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 198,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.indexOf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.indexOf"
					}
				},
				{
					"id": 199,
					"name": "lastIndexOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 200,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present."
							},
							"parameters": [
								{
									"id": 201,
									"name": "searchElement",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The value to locate in the array."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 202,
									"name": "fromIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.lastIndexOf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.lastIndexOf"
					}
				},
				{
					"id": 203,
					"name": "every",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 204,
							"name": "every",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Determines whether all the members of an array satisfy the specified test."
							},
							"typeParameter": [
								{
									"id": 205,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 206,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 207,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 208,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 209,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 210,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 211,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "predicate",
														"name": "value",
														"asserts": false,
														"targetType": {
															"type": "reference",
															"id": 205,
															"qualifiedName": "S",
															"package": "typescript",
															"name": "S"
														}
													}
												}
											]
										}
									}
								},
								{
									"id": 212,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "this",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"id": 205,
										"qualifiedName": "S",
										"package": "typescript",
										"name": "S"
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.every"
							}
						},
						{
							"id": 213,
							"name": "every",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Determines whether all the members of an array satisfy the specified test."
							},
							"parameters": [
								{
									"id": 214,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 215,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 216,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 217,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 218,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 219,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 220,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.every"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.every"
					}
				},
				{
					"id": 221,
					"name": "some",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 222,
							"name": "some",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Determines whether the specified callback function returns true for any element of an array."
							},
							"parameters": [
								{
									"id": 223,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 224,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 225,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 226,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 227,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 228,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 229,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.some"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.some"
					}
				},
				{
					"id": 230,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 231,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Performs the specified action for each element in an array."
							},
							"parameters": [
								{
									"id": 232,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 233,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 234,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 235,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 236,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 237,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 238,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.forEach"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.forEach"
					}
				},
				{
					"id": 239,
					"name": "map",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 240,
							"name": "map",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
							},
							"typeParameter": [
								{
									"id": 241,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 242,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 243,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 244,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 245,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 246,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 247,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 241,
														"qualifiedName": "U",
														"package": "typescript",
														"name": "U"
													}
												}
											]
										}
									}
								},
								{
									"id": 248,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 241,
									"qualifiedName": "U",
									"package": "typescript",
									"name": "U"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.map"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.map"
					}
				},
				{
					"id": 249,
					"name": "filter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 250,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the elements of an array that meet the condition specified in a callback function."
							},
							"typeParameter": [
								{
									"id": 251,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 252,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 253,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 254,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 255,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 256,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 257,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "predicate",
														"name": "value",
														"asserts": false,
														"targetType": {
															"type": "reference",
															"id": 251,
															"qualifiedName": "S",
															"package": "typescript",
															"name": "S"
														}
													}
												}
											]
										}
									}
								},
								{
									"id": 258,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 251,
									"qualifiedName": "S",
									"package": "typescript",
									"name": "S"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.filter"
							}
						},
						{
							"id": 259,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the elements of an array that meet the condition specified in a callback function."
							},
							"parameters": [
								{
									"id": 260,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 261,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 262,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 263,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 264,
															"name": "index",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 265,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												}
											]
										}
									}
								},
								{
									"id": 266,
									"name": "thisArg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.filter"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.filter"
					}
				},
				{
					"id": 267,
					"name": "reduce",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 268,
							"name": "reduce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
							},
							"parameters": [
								{
									"id": 269,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 270,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 271,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 272,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 273,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 274,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 275,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduce"
							}
						},
						{
							"id": 276,
							"name": "reduce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 277,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 278,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 279,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 280,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 281,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 282,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 283,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									}
								},
								{
									"id": 284,
									"name": "initialValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduce"
							}
						},
						{
							"id": 285,
							"name": "reduce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
							},
							"typeParameter": [
								{
									"id": 286,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 287,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 288,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 289,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 290,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 286,
																"qualifiedName": "U",
																"package": "typescript",
																"name": "U"
															}
														},
														{
															"id": 291,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 292,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 293,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 286,
														"qualifiedName": "U",
														"package": "typescript",
														"name": "U"
													}
												}
											]
										}
									}
								},
								{
									"id": 294,
									"name": "initialValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n"
									},
									"type": {
										"type": "reference",
										"id": 286,
										"qualifiedName": "U",
										"package": "typescript",
										"name": "U"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 286,
								"qualifiedName": "U",
								"package": "typescript",
								"name": "U"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduce"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.reduce"
					}
				},
				{
					"id": 295,
					"name": "reduceRight",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 296,
							"name": "reduceRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
							},
							"parameters": [
								{
									"id": 297,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 298,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 299,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 300,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 301,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 302,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 303,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduceRight"
							}
						},
						{
							"id": 304,
							"name": "reduceRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 305,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 306,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 307,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 308,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 309,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 310,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 311,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									}
								},
								{
									"id": 312,
									"name": "initialValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduceRight"
							}
						},
						{
							"id": 313,
							"name": "reduceRight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
							},
							"typeParameter": [
								{
									"id": 314,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 315,
									"name": "callbackfn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 316,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 317,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 318,
															"name": "previousValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"id": 314,
																"qualifiedName": "U",
																"package": "typescript",
																"name": "U"
															}
														},
														{
															"id": 319,
															"name": "currentValue",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 320,
															"name": "currentIndex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 321,
															"name": "array",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 314,
														"qualifiedName": "U",
														"package": "typescript",
														"name": "U"
													}
												}
											]
										}
									}
								},
								{
									"id": 322,
									"name": "initialValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n"
									},
									"type": {
										"type": "reference",
										"id": 314,
										"qualifiedName": "U",
										"package": "typescript",
										"name": "U"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 314,
								"qualifiedName": "U",
								"package": "typescript",
								"name": "U"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduceRight"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.reduceRight"
					}
				},
				{
					"id": 144,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 145,
							"name": "new StringArray",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 146,
									"name": "arrayLength",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 108,
								"name": "StringArray"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array<string>.constructor"
							}
						},
						{
							"id": 147,
							"name": "new StringArray",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 148,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 108,
								"name": "StringArray"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array<string>.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array<string>.constructor"
					}
				},
				{
					"id": 109,
					"name": "isArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"signatures": [
						{
							"id": 110,
							"name": "isArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 111,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "arg",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.isArray"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Array.isArray"
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						149,
						323,
						342,
						351,
						356,
						112,
						139,
						392,
						361,
						363,
						365,
						394,
						367,
						371,
						383,
						389,
						152,
						154,
						156,
						158,
						161,
						166,
						169,
						171,
						173,
						177,
						184,
						192,
						195,
						199,
						203,
						221,
						230,
						239,
						249,
						267,
						295,
						109
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						143,
						151
					]
				},
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						144
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/classes/StringArray.ts",
					"line": 14,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "intrinsic",
							"name": "string"
						}
					],
					"qualifiedName": "Array",
					"package": "typescript",
					"name": "Array"
				}
			]
		},
		{
			"id": 542,
			"name": "SimpleEnum",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Describes the status of a delivery order."
			},
			"children": [
				{
					"id": 543,
					"name": "Pending",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "This order has just been placed and is yet to be processed."
					},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 4,
							"character": 4
						}
					],
					"defaultValue": "0"
				},
				{
					"id": 544,
					"name": "InProgress",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "A courier is en route delivering this order."
					},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 7,
							"character": 4
						}
					],
					"defaultValue": "1"
				},
				{
					"id": 545,
					"name": "Complete",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The order has been delivered."
					},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 10,
							"character": 4
						}
					],
					"defaultValue": "\"COMPLETE\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						543,
						544,
						545
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/enums.ts",
					"line": 2,
					"character": 12
				}
			]
		},
		{
			"id": 546,
			"name": "CrazyEnum",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "[A crazy enum from the TypeScript\nhandbook](https://www.typescriptlang.org/docs/handbook/enums.html#computed-and-constant-members).\nThis enum contains both constant and computed members.",
				"text": "TypeDoc won't show the value of computed members since this information is\nonly available at runtime.\n"
			},
			"children": [
				{
					"id": 547,
					"name": "None",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 23,
							"character": 4
						}
					],
					"defaultValue": "0"
				},
				{
					"id": 548,
					"name": "Read",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 24,
							"character": 4
						}
					],
					"defaultValue": "2"
				},
				{
					"id": 549,
					"name": "Write",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 25,
							"character": 4
						}
					],
					"defaultValue": "4"
				},
				{
					"id": 550,
					"name": "ReadWrite",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 26,
							"character": 4
						}
					],
					"defaultValue": "6"
				},
				{
					"id": 551,
					"name": "ComputedMember",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 28,
							"character": 4
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						547,
						548,
						549,
						550,
						551
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/enums.ts",
					"line": 21,
					"character": 12
				}
			]
		},
		{
			"id": 552,
			"name": "EnumLikeObject",
			"kind": 8,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Since TypeScript's `enum` can be inconvenient to work with, some packages define their own enum-like objects:",
				"text": "```\nexport const EnumLikeObject = {\n    Pending: 'pending',\n    InProgress: 'inProgress',\n    Completed: 'completed'\n} as const\n```\n\nUse the `@enum` tag to make TypeDoc document this object as an enum.\n"
			},
			"children": [
				{
					"id": 553,
					"name": "Pending",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 47,
							"character": 4
						}
					],
					"defaultValue": "\"pending\""
				},
				{
					"id": 554,
					"name": "InProgress",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Indicates that a courier is en route delivering this order."
					},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 50,
							"character": 4
						}
					],
					"defaultValue": "\"inProgress\""
				},
				{
					"id": 555,
					"name": "Completed",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/enums.ts",
							"line": 52,
							"character": 4
						}
					],
					"defaultValue": "\"completed\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						553,
						554,
						555
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/enums.ts",
					"line": 46,
					"character": 13
				}
			]
		},
		{
			"id": 1,
			"name": "sqrt",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/functions.ts",
					"line": 7,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 2,
					"name": "sqrt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculates the square root of a number.",
						"returns": "the square root if `x` is non-negative or `NaN` if `x` is negative.\n"
					},
					"parameters": [
						{
							"id": 3,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "the number to calculate the root of."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 28,
			"name": "sqrtArrowFunction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/functions.ts",
					"line": 25,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 29,
					"name": "sqrtArrowFunction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculates the square root of a number.",
						"text": "`sqrtArrowFunction` is defined using a variable declaration:\n\n```\nexport const sqrtArrowFunction = (x: number): number => Math.sqrt(x);\n```\n\nTypeDoc is smart and documents `sqrtArrowFunction` as a function rather than a variable.\n",
						"returns": "the square root if `x` is non-negative or `NaN` if `x` is negative.\n"
					},
					"parameters": [
						{
							"id": 30,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "the number do calculate the root of."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 4,
			"name": "concat",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/functions.ts",
					"line": 40,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 5,
					"name": "concat",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A simple generic function that concatenates two arrays.",
						"text": "Use [`@typeParam <param\nname>`](https://typedoc.org/guides/doccomments/#%40typeparam-%3Cparam-name%3E-or-%40template-%3Cparam-name%3E)\nto document generic type parameters, e.g.\n\n```text\n@typeParam T the element type of the arrays\n```\n"
					},
					"typeParameter": [
						{
							"id": 6,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "the element type of the arrays\n"
							}
						}
					],
					"parameters": [
						{
							"id": 7,
							"name": "array1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 6,
									"name": "T"
								}
							}
						},
						{
							"id": 8,
							"name": "array2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 6,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 6,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 31,
			"name": "MakeHttpCallAOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The options type for [[`makeHttpCallA`]]."
			},
			"children": [
				{
					"id": 32,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/functions.ts",
							"line": 48,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 33,
					"name": "method",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "e.g. GET, POST, PUT, DELETE"
					},
					"sources": [
						{
							"fileName": "example/src/functions.ts",
							"line": 51,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34,
					"name": "headers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "e.g. `{ 'Authorization': 'Bearer <access token>' }`"
					},
					"sources": [
						{
							"fileName": "example/src/functions.ts",
							"line": 54,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					}
				},
				{
					"id": 35,
					"name": "body",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/functions.ts",
							"line": 55,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"qualifiedName": "Blob",
								"package": "typescript",
								"name": "Blob"
							},
							{
								"type": "reference",
								"qualifiedName": "FormData",
								"package": "typescript",
								"name": "FormData"
							}
						]
					}
				},
				{
					"id": 36,
					"name": "mode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/functions.ts",
							"line": 56,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "cors"
							},
							{
								"type": "literal",
								"value": "no-cors"
							},
							{
								"type": "literal",
								"value": "same-origin"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						32,
						33,
						34,
						35,
						36
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/functions.ts",
					"line": 47,
					"character": 17
				}
			]
		},
		{
			"id": 9,
			"name": "makeHttpCallA",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/functions.ts",
					"line": 66,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 10,
					"name": "makeHttpCallA",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A function that takes in an options object that is defined as a separate\ninterface and makes an HTTP call.",
						"text": "**Make sure to export the options type when using this pattern.** Otherwise,\nTypeDoc will not document the options.\n"
					},
					"parameters": [
						{
							"id": 11,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 31,
								"name": "MakeHttpCallAOptions"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"qualifiedName": "Response",
								"package": "typescript",
								"name": "Response"
							}
						],
						"qualifiedName": "Promise",
						"package": "typescript",
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 12,
			"name": "makeHttpCallB",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/functions.ts",
					"line": 79,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 13,
					"name": "makeHttpCallB",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A function that takes in an options object and makes an HTTP call.",
						"text": "The options type is written directly in the function definition.\n"
					},
					"parameters": [
						{
							"id": 14,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 15,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 16,
											"name": "url",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "example/src/functions.ts",
													"line": 80,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 17,
											"name": "method",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "e.g. GET, POST, PUT, DELETE"
											},
											"sources": [
												{
													"fileName": "example/src/functions.ts",
													"line": 83,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 18,
											"name": "headers",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "e.g. `{ 'Authorization': 'Bearer <access token>' }`"
											},
											"sources": [
												{
													"fileName": "example/src/functions.ts",
													"line": 86,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"qualifiedName": "Record",
												"package": "typescript",
												"name": "Record"
											}
										},
										{
											"id": 19,
											"name": "body",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "example/src/functions.ts",
													"line": 88,
													"character": 4
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"qualifiedName": "Blob",
														"package": "typescript",
														"name": "Blob"
													},
													{
														"type": "reference",
														"qualifiedName": "FormData",
														"package": "typescript",
														"name": "FormData"
													}
												]
											}
										},
										{
											"id": 20,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "example/src/functions.ts",
													"line": 89,
													"character": 4
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "cors"
													},
													{
														"type": "literal",
														"value": "no-cors"
													},
													{
														"type": "literal",
														"value": "same-origin"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												16,
												17,
												18,
												19,
												20
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"qualifiedName": "Response",
								"package": "typescript",
								"name": "Response"
							}
						],
						"qualifiedName": "Promise",
						"package": "typescript",
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 21,
			"name": "overloadedFunction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/functions.ts",
					"line": 103,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 22,
					"name": "overloadedFunction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Stringifies and concatenates two numbers into a single string.",
						"text": "The documentation site allows you to toggle between the different overloads\nof a function. The implementation signature of the overloaded function is not\nincluded in the documentation.\n"
					},
					"parameters": [
						{
							"id": 23,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 24,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 25,
					"name": "overloadedFunction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Concatenates two strings.",
						"text": "The documentation site allows you to toggle between the different overloads\nof a function. The implementation signature of the overloaded function is not\nincluded in the documentation.\n"
					},
					"parameters": [
						{
							"id": 26,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 27,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 612,
			"name": "anInternalFunction",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/internals.ts",
					"line": 8,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 613,
					"name": "anInternalFunction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "internal",
								"text": "\n\nUse `@internal` to indicate that something is for internal use. If the\n`--excludeInternal` option is passed, TypeDoc will not document the given\ncode.\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 580,
			"name": "CardAProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The props type for [[`CardA`]]."
			},
			"children": [
				{
					"id": 581,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The theme of the card. Defaults to `primary`."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 8,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "primary"
							},
							{
								"type": "literal",
								"value": "secondary"
							},
							{
								"type": "literal",
								"value": "success"
							},
							{
								"type": "literal",
								"value": "danger"
							},
							{
								"type": "literal",
								"value": "light"
							},
							{
								"type": "literal",
								"value": "dark"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						581
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/reactComponents.tsx",
					"line": 6,
					"character": 17
				}
			]
		},
		{
			"id": 569,
			"name": "CardA",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/reactComponents.tsx",
					"line": 40,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 570,
					"name": "CardA",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Renders a card around some content.",
						"text": "```tsx\n<CardA variant=\"secondary\">\n    <h5>My Title</h5>\n    <p>My content</p>\n</CardA>\n```\n\nThe props type is defined as a separate interface **which must be exported!**\n\n```\nexport interface CardAProps {\n    // ...\n}\n\nexport function CardA({\n    children,\n    variant = \"primary\",\n}: PropsWithChildren<CardAProps>): ReactElement {\n    // ...\n}\n```\n\nThis is our recommended way to define React components as it makes your code\nmore readable. The minor drawback is you must click the `CardAProps` link to\nsee the component's props.\n"
					},
					"parameters": [
						{
							"id": 571,
							"name": "__namedParameters",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 580,
										"name": "CardAProps"
									}
								],
								"qualifiedName": "React.PropsWithChildren",
								"package": "@types/react",
								"name": "PropsWithChildren"
							}
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "React.ReactElement",
						"package": "@types/react",
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 572,
			"name": "CardB",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/reactComponents.tsx",
					"line": 70,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 573,
					"name": "CardB",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Renders a card around some content.",
						"text": "```tsx\n<CardB variant=\"secondary\">\n    <h5>My Title</h5>\n    <p>My content</p>\n</CardB>\n```\n\nThe props type is written directly in the function definition:\n\n```\nexport function CardB({\n    children,\n    variant = \"primary\",\n}: PropsWithChildren<{\n    variant: \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"light\" | \"dark\";\n}>): ReactElement {\n    // ...\n}\n```\n\nThis can make the TypeDoc documentation a bit cleaner for very simple components,\nbut it makes your code less readable.\n"
					},
					"parameters": [
						{
							"id": 574,
							"name": "__namedParameters",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 575,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 576,
													"name": "variant",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The theme of the card. Defaults to `primary`."
													},
													"sources": [
														{
															"fileName": "example/src/reactComponents.tsx",
															"line": 75,
															"character": 4
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "primary"
															},
															{
																"type": "literal",
																"value": "secondary"
															},
															{
																"type": "literal",
																"value": "success"
															},
															{
																"type": "literal",
																"value": "danger"
															},
															{
																"type": "literal",
																"value": "light"
															},
															{
																"type": "literal",
																"value": "dark"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														576
													]
												}
											]
										}
									}
								],
								"qualifiedName": "React.PropsWithChildren",
								"package": "@types/react",
								"name": "PropsWithChildren"
							}
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "React.ReactElement",
						"package": "@types/react",
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 582,
			"name": "EasyFormDialogProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The props type of [[`EasyFormDialog`]]."
			},
			"children": [
				{
					"id": 583,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The title of the dialog. Can be a JSX element."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 83,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "React.ReactNode",
						"package": "@types/react",
						"name": "ReactNode"
					}
				},
				{
					"id": 584,
					"name": "submitButtonText",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The text of the submit button."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 86,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 585,
					"name": "submitButtonClass",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The CSS class of the submit button."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 89,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 586,
					"name": "cancelButtonText",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The text of the cancel button. Defaults to \"Cancel\"."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 92,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 587,
					"name": "submitEnabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Allows you to disable the submit button even if `getSubmitEnabled()`\nwould return true.",
						"text": "This can be useful if you want to disable the submit button while a query\nis in progress.\n"
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 101,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 588,
					"name": "formIsValid",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "A boolean indicating if the form is valid."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 104,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 589,
					"name": "showValidation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "A boolean indicating if validation feedback is being shown."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 107,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 590,
					"name": "onShowValidationChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 591,
							"name": "onShowValidationChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback that fires when the dialog is submitted."
							},
							"parameters": [
								{
									"id": 592,
									"name": "showValidation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 593,
					"name": "onSuccess",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 594,
							"name": "onSuccess",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback that fires after the `submit` function succeeds.",
								"text": "If the `submit` function returned `responseData`, it is passed to your\n`onSuccess` function.\n\nYour `onSuccess` callback must return a promise. The submit button will\ncontinue showing a loading indicator until the promise resolves. This is\nto support refetching the data that was updated by the form submission.\n"
							},
							"parameters": [
								{
									"id": 595,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 596,
					"name": "onClose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 597,
							"name": "onClose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback that fires when the dialog has completely closed. Your\n`onClose` callback should update call, for example,\n`setDialogVisible(false)` so that the `EasyFormDialog` is no longer\nrendered."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 598,
					"name": "onSubmit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 599,
							"name": "onSubmit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback that fires when the form is submitted. You will typically\nperform an API call in your `submit` function.",
								"text": "Your `submit` function can optionally return an object in the shape\n\n```\n{\n    shouldClose?: boolean\n    responseData: unknown\n}\n```\n\nUsing `formData` is deprecated. Use controlled components instead.\n\n`formData` will be `{}` if the optional peer dependency `jquery` is not\ninstalled.\n"
							},
							"parameters": [
								{
									"id": 600,
									"name": "formData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 601,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 602,
																	"name": "shouldClose",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "example/src/reactComponents.tsx",
																			"line": 153,
																			"character": 20
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 603,
																	"name": "responseData",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "example/src/reactComponents.tsx",
																			"line": 154,
																			"character": 20
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "unknown"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		602,
																		603
																	]
																}
															]
														}
													}
												]
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								]
							}
						}
					]
				},
				{
					"id": 604,
					"name": "onCancel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 605,
							"name": "onCancel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An uncommonly-used callback that fires when the user clicks the cancel button."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 606,
					"name": "closeRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This prop accepts a ref object that holds a function of type `() =>\nvoid`. You can execute the function to programmatically close the dialog:",
						"text": "```\ncloseRef.current()\n```\n"
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 173,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 607,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 608,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						],
						"qualifiedName": "React.MutableRefObject",
						"package": "@types/react",
						"name": "MutableRefObject"
					}
				},
				{
					"id": 609,
					"name": "modalClass",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The CSS class added to the underlying Bootstrap modal."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 176,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 610,
					"name": "focusFirst",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Set to `false` to disable the default behavior of focusing the first\ninput."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 182,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 611,
					"name": "showFooter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Set to `false` to hide the modal footer, which contains the submit and\ncancel buttons."
					},
					"sources": [
						{
							"fileName": "example/src/reactComponents.tsx",
							"line": 188,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						583,
						584,
						585,
						586,
						587,
						588,
						589,
						606,
						609,
						610,
						611
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						590,
						593,
						596,
						598,
						604
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/reactComponents.tsx",
					"line": 81,
					"character": 17
				}
			]
		},
		{
			"id": 577,
			"name": "EasyFormDialog",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/reactComponents.tsx",
					"line": 249,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 578,
					"name": "EasyFormDialog",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "An example of a complex React component.",
						"text": "A wrapper around `ActionDialog` that removes a lot of the boilerplate needed\nfor dialogs that contain a form.\n\n```tsx\ninterface ExampleProps {\n    onSuccess(responseData: number): Promise<void>\n    onClose(): void\n}\n\nexport function Example({\n    onSuccess,\n    onClose,\n}: ExampleProps): ReactElement {\n    const { onChildValidChange, allFieldsValid } = useFieldValidity()\n    const [showValidation, setShowValidation] = useState(false)\n    const vProps = { showValidation, onValidChange: onChildValidChange }\n\n    const [myNumber, setMyNumber] = useState('')\n\n    async function submit() {\n        await api.product.performOperation()\n\n        return {\n            responseData: parseInt(myNumber),\n        }\n    }\n\n    return (\n        <EasyFormDialog\n            title=\"Enter a Number\"\n            submitButtonText=\"Submit\"\n            formIsValid={allFieldsValid}\n            showValidation={showValidation}\n            onShowValidationChange={setShowValidation}\n            onSubmit={submit}\n            onSuccess={onSuccess}\n            onClose={onClose}\n        >\n            <FormGroup label=\"My number\">\n                {(id) => (\n                    <ValidatedInput\n                        id={id}\n                        name=\"myNumber\"\n                        validators={[Validators.required(), Validators.integer()]}\n                        value={myNumber}\n                        onChange={setMyNumber}\n                        {...vProps}\n                    />\n                )}\n            </FormGroup>\n        </EasyFormDialog>\n    )\n}\n```\n"
					},
					"parameters": [
						{
							"id": 579,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 582,
										"name": "EasyFormDialogProps"
									}
								],
								"qualifiedName": "React.PropsWithChildren",
								"package": "@types/react",
								"name": "PropsWithChildren"
							}
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "React.ReactElement",
						"package": "@types/react",
						"name": "ReactElement"
					}
				}
			]
		},
		{
			"id": 565,
			"name": "markdownShowcase",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/showcase.ts",
					"line": 56,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 566,
					"name": "markdownShowcase",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "# Markdown Showcase",
						"text": "All comments are parsed as **Markdown**. TypeDoc uses the\n[Marked](https://github.com/markedjs/marked) markdown parser to _convert\ncomments to HTML_.\n\n## Symbol References\n\nYou can link to other classes, members or functions using double square\nbrackets or an inline link tag. See the [TypeDoc\ndocumentation](https://typedoc.org/guides/doccomments/#symbol-references) for\ndetails.\n\n## Code in Doc Comments\n\nSome inline code: `npm install --save-dev typedoc`\n\nA TypeScript code block:\n\n```\n// A fabulous variable\nconst x: number | string = 12\n```\n\nSee [[`syntaxHighlightingShowcase`]] for more code blocks.\n\n## A List\n\n- 🥚 ~~Eggs~~\n- 🍞 Bread\n- 🧀 Swiss cheese\n\n## A Table\n\n| Package | Version |\n| ------- | ------- |\n| lodash  | 4.17.21 |\n| react   | 17.0.2  |\n| typedoc | 0.22.4  |\n\nA Random Shakespeare Quote\n--------------------------\n\n> Rebellious subjects, enemies to peace, Profaners of this neighbour-stained\n> steel,-- Will they not hear? What, ho! you men, you beasts, That quench the\n> fire of your pernicious rage With purple fountains issuing from your veins\n\n## An Image\n\n<img src=\"media://typescript-logo.svg\" width=\"120\" />\n\nThis requires the [media option](https://typedoc.org/guides/options/#media)\nto be set.\n"
					},
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 567,
			"name": "syntaxHighlightingShowcase",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "example/src/showcase.ts",
					"line": 117,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 568,
					"name": "syntaxHighlightingShowcase",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "TypeDoc supports code blocks in Markdown and uses\n[Shiki](https://shiki.matsu.io/) to provide syntax highlighting.",
						"text": "If no language is specified, the code block is assumed to be TypeScript:\n\n```\n// A fabulous variable\nconst x: number | string = 12\n```\n\nYou can specify the language at the start of your code block like this:\n\n ```text\n ```rust\n ```\n\nUse the `tsx` language to get JSX support:\n\n```tsx\nfunction BasicComponent(): ReactElement {\n    return <div>Test</div>\n}\n```\n\nYou might want to write code in the language your backend uses. Here's some\nPython:\n\n```python\nfor i in range(30):\n    print(i + 1)\n```\n\nAnd some CSS:\n\n```css\n.card {\n    background-color: white;\n    padding: 1rem;\n    border: 1px solid lightgray;\n}\n```\n\nIf you don't want syntax highlighting, use the `text` language:\n\n```text\npackage.json\nsrc/\n    index.ts\n    __tests__/\n        index.test.ts\n```\n\n[**View the full list of supported\nlanguages.**](https://github.com/shikijs/shiki/blob/main/docs/languages.md#all-languages)\nYou can also get this list by running `typedoc --help`.\n"
					},
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 45,
			"name": "SimpleTypeAlias",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A simple type alias defined using the `type` keyword."
			},
			"sources": [
				{
					"fileName": "example/src/types.ts",
					"line": 2,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					}
				]
			}
		},
		{
			"id": 46,
			"name": "ComplexGenericTypeAlias",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A complex generic type."
			},
			"sources": [
				{
					"fileName": "example/src/types.ts",
					"line": 5,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 47,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 47,
						"name": "T"
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 47,
							"name": "T"
						}
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 47,
								"name": "T"
							}
						],
						"qualifiedName": "Promise",
						"package": "typescript",
						"name": "Promise"
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 47,
									"name": "T"
								}
							}
						],
						"qualifiedName": "Promise",
						"package": "typescript",
						"name": "Promise"
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 47,
										"name": "T"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					}
				]
			}
		},
		{
			"id": 48,
			"name": "User",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A simple interface. Each property has its own doc comment.",
				"text": "TypeDoc even supports doc comments on nested type definitions, as shown by the `name` property.\n"
			},
			"children": [
				{
					"id": 49,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The user's ID."
					},
					"sources": [
						{
							"fileName": "example/src/types.ts",
							"line": 19,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 50,
					"name": "email",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The user's email address."
					},
					"sources": [
						{
							"fileName": "example/src/types.ts",
							"line": 22,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 51,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The user's name."
					},
					"sources": [
						{
							"fileName": "example/src/types.ts",
							"line": 25,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 52,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 53,
									"name": "first",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The person's given name."
									},
									"sources": [
										{
											"fileName": "example/src/types.ts",
											"line": 27,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 54,
									"name": "last",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The person's family name."
									},
									"sources": [
										{
											"fileName": "example/src/types.ts",
											"line": 30,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										53,
										54
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						49,
						50,
						51
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/types.ts",
					"line": 17,
					"character": 17
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 55,
					"name": "AdminUser"
				}
			]
		},
		{
			"id": 55,
			"name": "AdminUser",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "An interface that extends [[`User`]] and adds more properties.",
				"text": "Notice how TypeDoc automatically shows the inheritance hierarchy and where\neach property was originally defined.\n"
			},
			"children": [
				{
					"id": 58,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The user's ID."
					},
					"sources": [
						{
							"fileName": "example/src/types.ts",
							"line": 19,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 49,
						"name": "User.id"
					}
				},
				{
					"id": 59,
					"name": "email",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The user's email address."
					},
					"sources": [
						{
							"fileName": "example/src/types.ts",
							"line": 22,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 50,
						"name": "User.email"
					}
				},
				{
					"id": 60,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The user's name."
					},
					"sources": [
						{
							"fileName": "example/src/types.ts",
							"line": 25,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 61,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 62,
									"name": "first",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The person's given name."
									},
									"sources": [
										{
											"fileName": "example/src/types.ts",
											"line": 27,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 63,
									"name": "last",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The person's family name."
									},
									"sources": [
										{
											"fileName": "example/src/types.ts",
											"line": 30,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										62,
										63
									]
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 51,
						"name": "User.name"
					}
				},
				{
					"id": 56,
					"name": "administrativeArea",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/types.ts",
							"line": 41,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "sales"
							},
							{
								"type": "literal",
								"value": "delivery"
							},
							{
								"type": "literal",
								"value": "billing"
							}
						]
					}
				},
				{
					"id": 57,
					"name": "jobTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "example/src/types.ts",
							"line": 42,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						58,
						59,
						60,
						56,
						57
					]
				}
			],
			"sources": [
				{
					"fileName": "example/src/types.ts",
					"line": 40,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 48,
					"name": "User"
				}
			]
		},
		{
			"id": 37,
			"name": "PI",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A simple numeric constant."
			},
			"sources": [
				{
					"fileName": "example/src/variables.ts",
					"line": 2,
					"character": 13
				}
			],
			"type": {
				"type": "literal",
				"value": 3.14159265359
			},
			"defaultValue": "3.14159265359"
		},
		{
			"id": 38,
			"name": "STRING_CONSTANT",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "A simple string constant."
			},
			"sources": [
				{
					"fileName": "example/src/variables.ts",
					"line": 5,
					"character": 13
				}
			],
			"type": {
				"type": "literal",
				"value": "FOOBAR"
			},
			"defaultValue": "\"FOOBAR\""
		},
		{
			"id": 39,
			"name": "ObjectConstant",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "An plain JavaScript object using `as const`."
			},
			"sources": [
				{
					"fileName": "example/src/variables.ts",
					"line": 8,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 40,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 41,
							"name": "library",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "example/src/variables.ts",
									"line": 9,
									"character": 4
								}
							],
							"type": {
								"type": "literal",
								"value": "typedoc"
							},
							"defaultValue": "\"typedoc\""
						},
						{
							"id": 42,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "example/src/variables.ts",
									"line": 10,
									"character": 4
								}
							],
							"type": {
								"type": "literal",
								"value": "1.2.3"
							},
							"defaultValue": "\"1.2.3\""
						},
						{
							"id": 43,
							"name": "githubStars",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "How many people starred us on GitHub."
							},
							"sources": [
								{
									"fileName": "example/src/variables.ts",
									"line": 13,
									"character": 4
								}
							],
							"type": {
								"type": "literal",
								"value": 1000000
							},
							"defaultValue": "1_000_000"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								41,
								42,
								43
							]
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 44,
			"name": "E",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"shortText": "An exported variable defined with `let`.",
				"text": "This pattern should generally be avoided because the variable can be reassigned.\n"
			},
			"sources": [
				{
					"fileName": "example/src/variables.ts",
					"line": 22,
					"character": 11
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "2.718281828459045235"
		}
	],
	"groups": [
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				556,
				1,
				28,
				4,
				9,
				12,
				21,
				612,
				569,
				572,
				577,
				565,
				567
			],
			"categories": [
				{
					"title": "Collection",
					"children": [
						556
					]
				},
				{
					"title": "Other",
					"children": [
						1,
						28,
						4,
						9,
						12,
						21,
						612,
						569,
						572,
						577,
						565,
						567
					]
				}
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				404,
				64,
				86,
				108
			]
		},
		{
			"title": "Enumerations",
			"kind": 8,
			"children": [
				542,
				546,
				552
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				31,
				580,
				582,
				48,
				55
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				45,
				46
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				37,
				38,
				39,
				44
			]
		}
	],
	"sources": [
		{
			"fileName": "example/src/index.ts",
			"line": 1,
			"character": 0
		}
	]
}